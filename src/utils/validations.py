'''Input Validations'''

import functools
import re

import maskpass
import shortuuid

from config.regex_patterns import RegexPattern
from config.display_menu import DisplayMessage, Headers
from utils.custom_error import InvalidInputError


def error_handling(func):
    '''A decorator for error handling for regex validator'''

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        try:
            res = func(*args, **kwargs)
        except InvalidInputError as e:
            print(DisplayMessage.TRY_AGAIN_MSG.format(error=e))
            return False

        return res

    return wrapper


@error_handling
def validator(pattern: str, data: str, error_msg: str) -> bool:
    '''Validates using: re.fullmatch(regex, data)'''    

    match_obj = re.fullmatch(pattern, data)

    if not match_obj:
        raise InvalidInputError(error_msg)

    return True


def validate_id(entity: str) -> str:
    '''Checks the ids generated by shortuuid'''

    result = False
    prefix = entity[0].upper()
    regex_pattern = RegexPattern.ID_PATTERN

    while not result:
        entity_id = prefix + shortuuid.ShortUUID().random(length=5)
        result = validator(
            pattern=regex_pattern,
            data=entity_id,
            error_msg=DisplayMessage.INVALID_TEXT.format(Headers.ID)
        )

    return entity_id


def validate_password(prompt: str) -> str:
    ''' Checks password input: min length = 6'''

    result = False
    password = ''
    regex_pattern = RegexPattern.PASSWORD_PATTERN

    while not result:
        password = maskpass.askpass(mask='*', prompt=prompt)
        result = validator(
            pattern=regex_pattern,
            data=password,
            error_msg=DisplayMessage.INVALID_PASSWORD
        )

    return password


def regex_validator(prompt, regex_pattern, error_msg) -> str:
    '''Validates input using regex'''

    result = False
    input_data = ''

    while not result:
        input_data = input(prompt).lower()
        result = validator(
            pattern=regex_pattern,
            data=input_data,
            error_msg=error_msg
        )

    return input_data
